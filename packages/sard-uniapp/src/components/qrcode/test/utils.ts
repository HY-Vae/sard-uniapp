import { Canvas } from 'canvas'

import { ALPHANUMERIC_CHARS, ECLList, qrcode, random } from '../../../utils'

const charCapacities = [
  [
    [41, 25, 17],
    [77, 47, 32],
    [127, 77, 53],
    [187, 114, 78],
    [255, 154, 106],
    [322, 195, 134],
    [370, 224, 154],
    [461, 279, 192],
    [552, 335, 230],
    [652, 395, 271],
    [772, 468, 321],
    [883, 535, 367],
    [1022, 619, 425],
    [1101, 667, 458],
    [1250, 758, 520],
    [1408, 854, 586],
    [1548, 938, 644],
    [1725, 1046, 718],
    [1903, 1153, 792],
    [2061, 1249, 858],
    [2232, 1352, 929],
    [2409, 1460, 1003],
    [2620, 1588, 1091],
    [2812, 1704, 1171],
    [3057, 1853, 1273],
    [3283, 1990, 1367],
    [3517, 2132, 1465],
    [3669, 2223, 1528],
    [3909, 2369, 1628],
    [4158, 2520, 1732],
    [4417, 2677, 1840],
    [4686, 2840, 1952],
    [4965, 3009, 2068],
    [5253, 3183, 2188],
    [5529, 3351, 2303],
    [5836, 3537, 2431],
    [6153, 3729, 2563],
    [6479, 3927, 2699],
    [6743, 4087, 2809],
    [7089, 4296, 2953],
  ],
  [
    [34, 20, 14],
    [63, 38, 26],
    [101, 61, 42],
    [149, 90, 62],
    [202, 122, 84],
    [255, 154, 106],
    [293, 178, 122],
    [365, 221, 152],
    [432, 262, 180],
    [513, 311, 213],
    [604, 366, 251],
    [691, 419, 287],
    [796, 483, 331],
    [871, 528, 362],
    [991, 600, 412],
    [1082, 656, 450],
    [1212, 734, 504],
    [1346, 816, 560],
    [1500, 909, 624],
    [1600, 970, 666],
    [1708, 1035, 711],
    [1872, 1134, 779],
    [2059, 1248, 857],
    [2188, 1326, 911],
    [2395, 1451, 997],
    [2544, 1542, 1059],
    [2701, 1637, 1125],
    [2857, 1732, 1190],
    [3035, 1839, 1264],
    [3289, 1994, 1370],
    [3486, 2113, 1452],
    [3693, 2238, 1538],
    [3909, 2369, 1628],
    [4134, 2506, 1722],
    [4343, 2632, 1809],
    [4588, 2780, 1911],
    [4775, 2894, 1989],
    [5039, 3054, 2099],
    [5313, 3220, 2213],
    [5596, 3391, 2331],
  ],
  [
    [27, 16, 11],
    [48, 29, 20],
    [77, 47, 32],
    [111, 67, 46],
    [144, 87, 60],
    [178, 108, 74],
    [207, 125, 86],
    [259, 157, 108],
    [312, 189, 130],
    [364, 221, 151],
    [427, 259, 177],
    [489, 296, 203],
    [580, 352, 241],
    [621, 376, 258],
    [703, 426, 292],
    [775, 470, 322],
    [876, 531, 364],
    [948, 574, 394],
    [1063, 644, 442],
    [1159, 702, 482],
    [1224, 742, 509],
    [1358, 823, 565],
    [1468, 890, 611],
    [1588, 963, 661],
    [1718, 1041, 715],
    [1804, 1094, 751],
    [1933, 1172, 805],
    [2085, 1263, 868],
    [2181, 1322, 908],
    [2358, 1429, 982],
    [2473, 1499, 1030],
    [2670, 1618, 1112],
    [2805, 1700, 1168],
    [2949, 1787, 1228],
    [3081, 1867, 1283],
    [3244, 1966, 1351],
    [3417, 2071, 1423],
    [3599, 2181, 1499],
    [3791, 2298, 1579],
    [3993, 2420, 1663],
  ],
  [
    [17, 10, 7],
    [34, 20, 14],
    [58, 35, 24],
    [82, 50, 34],
    [106, 64, 44],
    [139, 84, 58],
    [154, 93, 64],
    [202, 122, 84],
    [235, 143, 98],
    [288, 174, 119],
    [331, 200, 137],
    [374, 227, 155],
    [427, 259, 177],
    [468, 283, 194],
    [530, 321, 220],
    [602, 365, 250],
    [674, 408, 280],
    [746, 452, 310],
    [813, 493, 338],
    [919, 557, 382],
    [969, 587, 403],
    [1056, 640, 439],
    [1108, 672, 461],
    [1228, 744, 511],
    [1286, 779, 535],
    [1425, 864, 593],
    [1501, 910, 625],
    [1581, 958, 658],
    [1677, 1016, 698],
    [1782, 1080, 742],
    [1897, 1150, 790],
    [2022, 1226, 842],
    [2157, 1307, 898],
    [2301, 1394, 958],
    [2361, 1431, 983],
    [2524, 1530, 1051],
    [2625, 1591, 1093],
    [2735, 1658, 1139],
    [2927, 1774, 1219],
    [3057, 1852, 1273],
  ],
]

function getCharNum(eclIndex: number, version: number, mode: number) {
  if (version === 0) {
    return 0
  }
  return charCapacities[eclIndex][version - 1][mode]
}

export function getRandomText(eclIndex: number, version: number, mode: number) {
  const creater = [
    () => String.fromCodePoint(random(49, 57)),
    () => ALPHANUMERIC_CHARS.at(random(0, 44)),
    () => String.fromCodePoint(random(0x4e00, 0x9fa5)),
  ]
  const charNum = getCharNum(eclIndex, version - 1, mode)
  return Array(mode === 2 ? ~~(charNum / 3) + 1 : charNum + 1)
    .fill(0)
    .map(() => creater[mode]())
    .join('')
}

interface DrawMapToCanvasOptions {
  size?: number
  color?: string
  bgColor?: string
  quietZoneModules?: number
}

export function drawMapToCanvas(
  map: number[][],
  canvas: Canvas,
  options: DrawMapToCanvasOptions = {},
) {
  const {
    size = 240,
    color = '#000',
    bgColor = '#fff',
    quietZoneModules = 0,
  } = options
  canvas.width = size
  canvas.height = size
  const context = canvas.getContext('2d')
  const moduleSize = size / (map.length + quietZoneModules * 2)
  const margin = moduleSize * quietZoneModules

  context.clearRect(0, 0, size, size)
  context.fillStyle = bgColor
  context.fillRect(0, 0, size, size)
  context.fillStyle = color

  map.forEach((row, rowIndex) => {
    row.forEach((col, colIndex) => {
      if (col === 1) {
        context.fillRect(
          colIndex * moduleSize + margin,
          rowIndex * moduleSize + margin,
          moduleSize,
          moduleSize,
        )
      }
    })
  })
}

export function createRandomQrcode() {
  const results: [number, number, number, string, string][] = []
  for (let mode = 0; mode < 3; mode++) {
    for (let eclIndex = 0; eclIndex < 4; eclIndex++) {
      const version = 3
      const text = getRandomText(eclIndex, version, mode)
      results.push([
        mode,
        eclIndex,
        version,
        text,
        qrcode(text, {
          ecl: ECLList[eclIndex],
        })
          .map((row) => row.join(''))
          .join(''),
      ])
    }
  }

  return results
}

export const templateData: [
  mode: number,
  eclIndex: number,
  version: number,
  text: string,
  bits: string,
][] = [
  [
    0,
    0,
    3,
    '348225387153986982694353493579848472895687283156376361859634796792865481434748',

  ],
  [
    0,
    1,
    3,
    '5435417618345892661739564688646526345355222732778774828638496336',

  ],
  [
    0,
    2,
    3,
    '5642469479548213533163688232524215771591555224761',

  ],
  [
    0,
    3,
    3,
    '53538335531236555954812632624392673',
    '1111111010011011001111111100000101100101000100000110111010110011000010111011011101000111000101011101101110100110001010101110110000010111000011010000011111111010101010101111111000000001011110010000000000111010110111010111001110001000011110001011000110111011110001001101000001001001101011101111101000111110101010100000100011111111011001110110101100101010101111000100000110101111010010001011010101110011100000110100011011111100100000000101001101000101001111111000001101101011110100000100111100110001100110111010100110001111100001011101011000100111110001101110101000011010001110110000010001010010010001111111111000001000110010001',
  ],
  [
    1,
    0,
    3,
    'Z/JGSR61 +/B+J HLV0EJ1C2J5$ P*KZH2G1*EAMTE5+G-Z7',

  ],
  [
    1,
    1,
    3,
    'J0MU3.AICM%4Z$C-36SOQ4Y/H4M1$A875RC5LQ:',

  ],
  [
    1,
    2,
    3,
    '*PY.2HY%EZ0-*E0EL-8022XM2IU%OL',

  ],
  [
    1,
    3,
    3,
    'N+5LMOXD69Q-II5I5KN2B',

  ],
  [
    2,
    0,
    3,
    '袌縷俧舫椁螜嘵艩踸畠癬',

  ],
  [
    2,
    1,
    3,
    '林廸鵡汋茹叟惰潓譙',

  ],
  [
    2,
    2,
    3,
    '氲舷脖瀅瘇逎釐',

  ],
  [
    2,
    3,
    3,
    '鲝纂壆嗙餹',

  ],
]
